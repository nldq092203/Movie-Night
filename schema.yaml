openapi: 3.0.3
info:
  title: Movie Night
  version: 1.0.0
  description: API for Movie Night
paths:
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/v1/genres/:
    get:
      operationId: api_v1_genres_list
      description: |-
        View for listing all genres ordered by "name'

        - GET: Lists all genres available in the system.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGenreList'
          description: ''
  /api/v1/genres/{id}/:
    get:
      operationId: api_v1_genres_retrieve
      description: |-
        View for retrieving the details of a specific genre.

        - GET: Retrieve details of a specific genre by its ID.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
  /api/v1/movie-nights/:
    get:
      operationId: api_v1_movie_nights_list
      description: |-
        View for listing all MovieNight instances where the authenticated user
        is either the creator or a confirmed attendance invitee.
      parameters:
      - in: query
        name: creator
        schema:
          type: integer
      - in: query
        name: invites__invitee
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: start_from
        schema:
          type: string
          format: date-time
        description: Start Time From
      - in: query
        name: start_time
        schema:
          type: string
          format: date-time
      - in: query
        name: start_to
        schema:
          type: string
          format: date-time
        description: Start Time To
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMovieNightList'
          description: ''
  /api/v1/movie-nights/{id}/:
    get:
      operationId: api_v1_movie_nights_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieNightDetail'
          description: ''
    put:
      operationId: api_v1_movie_nights_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieNightDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MovieNightDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MovieNightDetail'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieNightDetail'
          description: ''
    patch:
      operationId: api_v1_movie_nights_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMovieNightDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMovieNightDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMovieNightDetail'
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieNightDetail'
          description: ''
    delete:
      operationId: api_v1_movie_nights_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/movie-nights/{id}/invite/:
    post:
      operationId: api_v1_movie_nights_invite_create
      description: |-
        API view for creating MovieNight invitations.
        This view allows the creator of a MovieNight to send invitations to other users.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieNightInvitation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MovieNightInvitation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MovieNightInvitation'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieNightInvitation'
          description: ''
  /api/v1/movie-nights/invited/:
    get:
      operationId: api_v1_movie_nights_invited_list
      description: View for listing all MovieNight instances where the authenticated
        user has been invited.
      parameters:
      - in: query
        name: creator
        schema:
          type: integer
      - in: query
        name: invites__invitee
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: start_from
        schema:
          type: string
          format: date-time
        description: Start Time From
      - in: query
        name: start_time
        schema:
          type: string
          format: date-time
      - in: query
        name: start_to
        schema:
          type: string
          format: date-time
        description: Start Time To
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMovieNightList'
          description: ''
  /api/v1/movienight-invitations/:
    get:
      operationId: api_v1_movienight_invitations_list
      description: View for listing all MovieNight invitation sent for an authenticated
        user
      parameters:
      - in: query
        name: attendance_confirmed
        schema:
          type: boolean
        description: Filter invitations where invitees have responded to the invitation.
      - in: query
        name: is_attending
        schema:
          type: boolean
        description: Filter invitations where invitees have accepted the invitation.
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMovieNightInvitationList'
          description: ''
  /api/v1/movienight-invitations/{id}/:
    get:
      operationId: api_v1_movienight_invitations_retrieve
      description: |-
        View for retrieving, updating, or deleting a MovieNightInvitation instance.

        - GET: Retrieve details of a specific movie night invitation.
        - PUT/PATCH: Update details of a movie night invitation if the user is the invitee.
        - DELETE: Remove a movie night invitation if the user is the invitee.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieNightInvitation'
          description: ''
    put:
      operationId: api_v1_movienight_invitations_update
      description: |-
        View for retrieving, updating, or deleting a MovieNightInvitation instance.

        - GET: Retrieve details of a specific movie night invitation.
        - PUT/PATCH: Update details of a movie night invitation if the user is the invitee.
        - DELETE: Remove a movie night invitation if the user is the invitee.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieNightInvitation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MovieNightInvitation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MovieNightInvitation'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieNightInvitation'
          description: ''
    patch:
      operationId: api_v1_movienight_invitations_partial_update
      description: |-
        View for retrieving, updating, or deleting a MovieNightInvitation instance.

        - GET: Retrieve details of a specific movie night invitation.
        - PUT/PATCH: Update details of a movie night invitation if the user is the invitee.
        - DELETE: Remove a movie night invitation if the user is the invitee.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMovieNightInvitation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMovieNightInvitation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMovieNightInvitation'
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieNightInvitation'
          description: ''
    delete:
      operationId: api_v1_movienight_invitations_destroy
      description: |-
        View for retrieving, updating, or deleting a MovieNightInvitation instance.

        - GET: Retrieve details of a specific movie night invitation.
        - PUT/PATCH: Update details of a movie night invitation if the user is the invitee.
        - DELETE: Remove a movie night invitation if the user is the invitee.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/movies/:
    get:
      operationId: api_v1_movies_list
      description: |-
        A list view to filter movies based on criteria such as genres, country, year, and runtime.

        This view:
        - Applies filters provided via query parameters.
        - Supports ordering by year, runtime, and title.

        Returns: a list of filtered movies.
      parameters:
      - in: query
        name: country
        schema:
          type: string
      - in: query
        name: genres
        schema:
          type: array
          items:
            type: string
        description: Genres
        explode: true
        style: form
      - in: query
        name: imdb_rating_from
        schema:
          type: number
          format: float
        description: Minimum IMDb Rating
      - in: query
        name: is_full_record
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: published_from
        schema:
          type: string
          format: date
        description: Published Date From
      - in: query
        name: published_to
        schema:
          type: string
          format: date
        description: Published Date To
      - in: query
        name: runtime_minutes_from
        schema:
          type: integer
        description: Minimum Runtime (minutes)
      - in: query
        name: runtime_minutes_to
        schema:
          type: integer
        description: Maximum Runtime (minutes)
      - in: query
        name: title
        schema:
          type: string
        description: Title Contains
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMovieList'
          description: ''
  /api/v1/movies/{id}/:
    get:
      operationId: api_v1_movies_retrieve
      description: |-
        Retrieve and update detailed information for a single movie.

        This view:
        - Fetches a movie by its primary key (IMDB ID).
        - Calls the OMDB API to update movie details if not already fully recorded.
        - Returns the detailed movie data.

        Returns:
        - A response containing the movie details or an error if the movie is not found or another issue occurs.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDetail'
          description: ''
  /api/v1/movies/search/:
    post:
      operationId: api_v1_movies_search_create
      description: Search for movies based on a search term. This view initiates a
        background task using Celery to fetch results, and returns a 302 redirect
        based on task completion.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieSearch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MovieSearch'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MovieSearch'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '302':
          content:
            application/json:
              schema:
                type: string
          description: Redirected to either the 'wait' page or the results page depending
            on task completion.
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                InvalidInput:
                  value:
                    term:
                    - This field is required.
                  summary: Invalid Input
          description: Invalid input data. The request failed validation. The response
            contains error details.
        '500':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                ServerError:
                  value:
                    error: An error occurred while processing your request.
                  summary: Server Error
          description: Internal Server Error. An error occurred while processing the
            request. This typically happens due to Celery issues or other server problems.
  /api/v1/movies/search-results/:
    get:
      operationId: api_v1_movies_search_results_list
      description: Return paginated search results based on the search term.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: search_term
        schema:
          type: string
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMovieList'
          description: ''
  /api/v1/movies/search-wait/{result_uuid}/:
    get:
      operationId: api_v1_movies_search_wait_retrieve
      description: Handle pending search results from a Celery task.
      parameters:
      - in: path
        name: result_uuid
        schema:
          type: string
          format: uuid
        required: true
      - in: query
        name: search_term
        schema:
          type: string
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '302':
          content:
            application/json:
              schema:
                type: string
          description: ''
        '500':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/v1/my-movie-nights/:
    get:
      operationId: api_v1_my_movie_nights_list
      description: |-
        View for listing and creating MovieNight instances that are created by the currently authenticated user.

        - GET: Lists movie nights created by the current user.
        - POST: Allows the current user to create a new movie night.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: start_from
        schema:
          type: string
          format: date-time
        description: Start Time From
      - in: query
        name: start_time
        schema:
          type: string
          format: date-time
      - in: query
        name: start_to
        schema:
          type: string
          format: date-time
        description: Start Time To
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMovieNightList'
          description: ''
    post:
      operationId: api_v1_my_movie_nights_create
      description: |-
        View for listing and creating MovieNight instances that are created by the currently authenticated user.

        - GET: Lists movie nights created by the current user.
        - POST: Allows the current user to create a new movie night.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieNight'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MovieNight'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MovieNight'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieNight'
          description: ''
  /api/v1/notifications/:
    get:
      operationId: api_v1_notifications_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationList'
          description: ''
  /api/v1/notifications/{id}/mark-read/:
    put:
      operationId: api_v1_notifications_mark_read_update
      description: |-
        API view to mark a specific notification as read.

        - PATCH: Marks the specified notification as `is_read=True` for the authenticated user.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    patch:
      operationId: api_v1_notifications_mark_read_partial_update
      description: Mark a specific notification as read for the authenticated user.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
        '403':
          description: Forbidden. You are not allowed to update this notification.
        '404':
          description: Notification not found.
  /api/v1/notifications/mark-all-seen/:
    patch:
      operationId: api_v1_notifications_mark_all_seen_partial_update
      description: Marks all notifications as seen for the authenticated user
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: All notifications marked as seen
                examples:
                  application/json:
                    message: All notifications marked as seen.
          description: ''
        '204':
          content:
            application/json:
              schema:
                description: No unseen notifications found
                examples:
                  application/json:
                    message: No unseen notifications found.
          description: ''
        '401':
          content:
            application/json:
              schema:
                description: Unauthorized request
                examples:
                  application/json:
                    detail: Authentication credentials were not provided.
          description: ''
  /api/v1/profiles/{email}/:
    get:
      operationId: api_v1_profiles_retrieve
      description: |-
        API view for retrieving a user's profile by email.
        Only authenticated users can access this view.
      parameters:
      - in: path
        name: email
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /auth/google/:
    post:
      operationId: auth_google_create
      parameters:
      - in: query
        name: id_token
        schema:
          type: string
        description: The ID token received from Google
        required: true
      tags:
      - auth
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '200':
          description: Successful authentication
        '400':
          description: ID token is required
        '401':
          description: Unauthorized
  /auth/token/:
    post:
      operationId: auth_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      security:
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      security:
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /auth/users/:
    get:
      operationId: auth_users_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - auth
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: auth_users_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreatePasswordRetype'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreatePasswordRetype'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreatePasswordRetype'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreatePasswordRetype'
          description: ''
  /auth/users/{email}/:
    get:
      operationId: auth_users_retrieve
      parameters:
      - in: path
        name: email
        schema:
          type: string
          format: email
          title: Email address
        required: true
      tags:
      - auth
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_users_update
      parameters:
      - in: path
        name: email
        schema:
          type: string
          format: email
          title: Email address
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_users_partial_update
      parameters:
      - in: path
        name: email
        schema:
          type: string
          format: email
          title: Email address
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: auth_users_destroy
      parameters:
      - in: path
        name: email
        schema:
          type: string
          format: email
          title: Email address
        required: true
      tags:
      - auth
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '204':
          description: No response body
  /auth/users/activation/:
    post:
      operationId: auth_users_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Activation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Activation'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
  /auth/users/me/:
    get:
      operationId: auth_users_me_retrieve
      tags:
      - auth
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_users_me_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_users_me_partial_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: auth_users_me_destroy
      tags:
      - auth
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '204':
          description: No response body
  /auth/users/resend_activation/:
    post:
      operationId: auth_users_resend_activation_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_email/:
    post:
      operationId: auth_users_reset_email_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_email_confirm/:
    post:
      operationId: auth_users_reset_email_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
  /auth/users/reset_password/:
    post:
      operationId: auth_users_reset_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_password_confirm/:
    post:
      operationId: auth_users_reset_password_confirm_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRetype'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRetype'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRetype'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirmRetype'
          description: ''
  /auth/users/set_email/:
    post:
      operationId: auth_users_set_email_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsername'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsername'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsername'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
          description: ''
  /auth/users/set_password/:
    post:
      operationId: auth_users_set_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPassword'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - BearerAuth: []
      - BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
          description: ''
components:
  schemas:
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    Genre:
      type: object
      description: Serializer for the Genre model. Validates and serializes genre
        data.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
      required:
      - id
      - name
    Movie:
      type: object
      description: Serializer for the Movie model. Serializes basic movie information.
      properties:
        id:
          type: integer
          readOnly: true
        imdb_id:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
        year:
          type: integer
          maximum: 2147483647
          minimum: 0
        url_poster:
          type: string
          format: uri
          maxLength: 200
      required:
      - id
      - imdb_id
      - title
      - url_poster
      - year
    MovieDetail:
      type: object
      description: Serializer for detailed Movie information, including genres.
      properties:
        id:
          type: integer
          readOnly: true
        genres:
          type: array
          items:
            type: string
        imdb_id:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
        year:
          type: integer
          maximum: 2147483647
          minimum: 0
        runtime_minutes:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        plot:
          type: string
        country:
          type: string
        imdb_rating:
          type: number
          format: double
        url_poster:
          type: string
          format: uri
          maxLength: 200
        is_full_record:
          type: boolean
      required:
      - country
      - genres
      - id
      - imdb_id
      - plot
      - title
      - url_poster
      - year
    MovieNight:
      type: object
      description: Serializer for MovieNight model. Includes fields for the creator,
        movie, and start time.
      properties:
        id:
          type: integer
          readOnly: true
        start_time:
          type: string
          format: date-time
        creator:
          type: string
          format: email
          title: Email address
          readOnly: true
        movie:
          type: integer
        is_creator:
          type: string
          readOnly: true
      required:
      - creator
      - id
      - is_creator
      - movie
      - start_time
    MovieNightDetail:
      type: object
      description: Detailed serializer for MovieNight, adding pending invitees and
        participants information.
      properties:
        id:
          type: integer
          readOnly: true
        movie:
          type: integer
        start_time:
          type: string
          format: date-time
        creator:
          type: string
          format: email
          title: Email address
          readOnly: true
        start_notification_sent:
          type: boolean
        start_notification_before:
          type: string
        pending_invitees:
          type: array
          items:
            type: string
          description: |-
            Retrieve emails of invitees who haven't confirmed yet,
            but only return this data if the requesting user is the creator.
          readOnly: true
        participants:
          type: array
          items:
            type: string
          description: Retrieve emails of invitees who have confirmed their attendance.
          readOnly: true
        is_creator:
          type: string
          readOnly: true
      required:
      - creator
      - id
      - is_creator
      - movie
      - participants
      - pending_invitees
      - start_time
    MovieNightInvitation:
      type: object
      description: Serializer for MovieNightInvitation model. Handles the invitee
        and invitation data.
      properties:
        id:
          type: integer
          readOnly: true
        invitee:
          type: string
          format: email
        movie_night:
          type: integer
        attendance_confirmed:
          type: boolean
        is_attending:
          type: boolean
      required:
      - id
      - invitee
      - movie_night
    MovieSearch:
      type: object
      description: |-
        Serializer for a search term input for searching movies.
        This serializer only handles a single field: 'term'.
      properties:
        term:
          type: string
          maxLength: 255
      required:
      - term
    Notification:
      type: object
      description: |-
        Serializer for Notification model. Serializes notification data including sender, recipient,
        and related content object.
      properties:
        id:
          type: integer
          readOnly: true
        recipient_email:
          type: string
          format: email
          readOnly: true
        sender_email:
          type: string
          format: email
          readOnly: true
          nullable: true
        notification_type:
          $ref: '#/components/schemas/NotificationTypeEnum'
        is_read:
          type: boolean
        content_type:
          type: integer
        object_id:
          type: integer
          maximum: 2147483647
          minimum: 0
        content_object:
          type: string
          readOnly: true
        message:
          type: string
        timestamp:
          type: string
          format: date-time
          readOnly: true
        is_seen:
          type: boolean
      required:
      - content_object
      - content_type
      - id
      - notification_type
      - object_id
      - recipient_email
      - sender_email
      - timestamp
    NotificationTypeEnum:
      enum:
      - INV
      - REM
      - RES
      - UPD
      - CAN
      type: string
      description: |-
        * `INV` - Invitation
        * `REM` - Reminder
        * `RES` - Response
        * `UPD` - Update
        * `CAN` - Cancellation
    PaginatedGenreList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
    PaginatedMovieList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
    PaginatedMovieNightInvitationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MovieNightInvitation'
    PaginatedMovieNightList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MovieNight'
    PaginatedNotificationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PasswordResetConfirmRetype:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
        re_new_password:
          type: string
      required:
      - new_password
      - re_new_password
      - token
      - uid
    PatchedMovieNightDetail:
      type: object
      description: Detailed serializer for MovieNight, adding pending invitees and
        participants information.
      properties:
        id:
          type: integer
          readOnly: true
        movie:
          type: integer
        start_time:
          type: string
          format: date-time
        creator:
          type: string
          format: email
          title: Email address
          readOnly: true
        start_notification_sent:
          type: boolean
        start_notification_before:
          type: string
        pending_invitees:
          type: array
          items:
            type: string
          description: |-
            Retrieve emails of invitees who haven't confirmed yet,
            but only return this data if the requesting user is the creator.
          readOnly: true
        participants:
          type: array
          items:
            type: string
          description: Retrieve emails of invitees who have confirmed their attendance.
          readOnly: true
        is_creator:
          type: string
          readOnly: true
    PatchedMovieNightInvitation:
      type: object
      description: Serializer for MovieNightInvitation model. Handles the invitee
        and invitation data.
      properties:
        id:
          type: integer
          readOnly: true
        invitee:
          type: string
          format: email
        movie_night:
          type: integer
        attendance_confirmed:
          type: boolean
        is_attending:
          type: boolean
    PatchedNotification:
      type: object
      description: |-
        Serializer for Notification model. Serializes notification data including sender, recipient,
        and related content object.
      properties:
        id:
          type: integer
          readOnly: true
        recipient_email:
          type: string
          format: email
          readOnly: true
        sender_email:
          type: string
          format: email
          readOnly: true
          nullable: true
        notification_type:
          $ref: '#/components/schemas/NotificationTypeEnum'
        is_read:
          type: boolean
        content_type:
          type: integer
        object_id:
          type: integer
          maximum: 2147483647
          minimum: 0
        content_object:
          type: string
          readOnly: true
        message:
          type: string
        timestamp:
          type: string
          format: date-time
          readOnly: true
        is_seen:
          type: boolean
    PatchedUser:
      type: object
      properties:
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - current_password
      - new_password
    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - current_password
      - new_email
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
      required:
      - email
    UserCreatePasswordRetype:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
        re_password:
          type: string
      required:
      - email
      - password
      - re_password
    UserProfile:
      type: object
      description: |-
        Serializer for the UserProfile model.
        Handles all fields of the UserProfile model.
      properties:
        id:
          type: integer
          readOnly: true
        bio:
          type: string
        user:
          type: integer
      required:
      - bio
      - id
      - user
    UsernameResetConfirm:
      type: object
      properties:
        new_email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - new_email
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
