/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
         *
         *     - YAML: application/vnd.oai.openapi
         *     - JSON: application/vnd.oai.openapi+json */
        get: operations["api_schema_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/genres/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View for listing all genres ordered by "name'
         *
         *     - GET: Lists all genres available in the system. */
        get: operations["api_v1_genres_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/genres/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View for retrieving the details of a specific genre.
         *
         *     - GET: Retrieve details of a specific genre by its ID. */
        get: operations["api_v1_genres_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/movie-nights/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View for listing all MovieNight instances where the authenticated user
         *     is either the creator or a confirmed attendance invitee. */
        get: operations["api_v1_movie_nights_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/movie-nights/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_v1_movie_nights_retrieve"];
        put: operations["api_v1_movie_nights_update"];
        post?: never;
        delete: operations["api_v1_movie_nights_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_v1_movie_nights_partial_update"];
        trace?: never;
    };
    "/api/v1/movie-nights/{id}/invite/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description API view for creating MovieNight invitations.
         *     This view allows the creator of a MovieNight to send invitations to other users. */
        post: operations["api_v1_movie_nights_invite_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/movie-nights/invited/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View for listing all MovieNight instances where the authenticated user has been invited. */
        get: operations["api_v1_movie_nights_invited_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/movienight-invitations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View for listing all MovieNight invitation sent for an authenticated user */
        get: operations["api_v1_movienight_invitations_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/movienight-invitations/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View for retrieving, updating, or deleting a MovieNightInvitation instance.
         *
         *     - GET: Retrieve details of a specific movie night invitation.
         *     - PUT/PATCH: Update details of a movie night invitation if the user is the invitee.
         *     - DELETE: Remove a movie night invitation if the user is the invitee. */
        get: operations["api_v1_movienight_invitations_retrieve"];
        /** @description View for retrieving, updating, or deleting a MovieNightInvitation instance.
         *
         *     - GET: Retrieve details of a specific movie night invitation.
         *     - PUT/PATCH: Update details of a movie night invitation if the user is the invitee.
         *     - DELETE: Remove a movie night invitation if the user is the invitee. */
        put: operations["api_v1_movienight_invitations_update"];
        post?: never;
        /** @description View for retrieving, updating, or deleting a MovieNightInvitation instance.
         *
         *     - GET: Retrieve details of a specific movie night invitation.
         *     - PUT/PATCH: Update details of a movie night invitation if the user is the invitee.
         *     - DELETE: Remove a movie night invitation if the user is the invitee. */
        delete: operations["api_v1_movienight_invitations_destroy"];
        options?: never;
        head?: never;
        /** @description View for retrieving, updating, or deleting a MovieNightInvitation instance.
         *
         *     - GET: Retrieve details of a specific movie night invitation.
         *     - PUT/PATCH: Update details of a movie night invitation if the user is the invitee.
         *     - DELETE: Remove a movie night invitation if the user is the invitee. */
        patch: operations["api_v1_movienight_invitations_partial_update"];
        trace?: never;
    };
    "/api/v1/movies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description A list view to filter movies based on criteria such as genres, country, year, and runtime.
         *
         *     This view:
         *     - Applies filters provided via query parameters.
         *     - Supports ordering by year, runtime, and title.
         *
         *     Returns: a list of filtered movies. */
        get: operations["api_v1_movies_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/movies/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve and update detailed information for a single movie.
         *
         *     This view:
         *     - Fetches a movie by its primary key (IMDB ID).
         *     - Calls the OMDB API to update movie details if not already fully recorded.
         *     - Returns the detailed movie data.
         *
         *     Returns:
         *     - A response containing the movie details or an error if the movie is not found or another issue occurs. */
        get: operations["api_v1_movies_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/movies/search/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Search for movies based on a search term. This view initiates a background task using Celery to fetch results, and returns a 302 redirect based on task completion. */
        post: operations["api_v1_movies_search_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/movies/search-results/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return paginated search results based on the search term. */
        get: operations["api_v1_movies_search_results_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/movies/search-wait/{result_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Handle pending search results from a Celery task. */
        get: operations["api_v1_movies_search_wait_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/my-movie-nights/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View for listing and creating MovieNight instances that are created by the currently authenticated user.
         *
         *     - GET: Lists movie nights created by the current user.
         *     - POST: Allows the current user to create a new movie night. */
        get: operations["api_v1_my_movie_nights_list"];
        put?: never;
        /** @description View for listing and creating MovieNight instances that are created by the currently authenticated user.
         *
         *     - GET: Lists movie nights created by the current user.
         *     - POST: Allows the current user to create a new movie night. */
        post: operations["api_v1_my_movie_nights_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_v1_notifications_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/{id}/mark-read/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description API view to mark a specific notification as read.
         *
         *     - PATCH: Marks the specified notification as `is_read=True` for the authenticated user. */
        put: operations["api_v1_notifications_mark_read_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Mark a specific notification as read for the authenticated user. */
        patch: operations["api_v1_notifications_mark_read_partial_update"];
        trace?: never;
    };
    "/api/v1/profiles/{email}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API view for retrieving a user's profile by email.
         *     Only authenticated users can access this view. */
        get: operations["api_v1_profiles_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_google_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a set of user credentials and returns an access and refresh JSON web
         *     token pair to prove the authentication of those credentials. */
        post: operations["auth_token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["auth_token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["auth_users_list"];
        put?: never;
        post: operations["auth_users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/users/{email}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["auth_users_retrieve"];
        put: operations["auth_users_update"];
        post?: never;
        delete: operations["auth_users_destroy"];
        options?: never;
        head?: never;
        patch: operations["auth_users_partial_update"];
        trace?: never;
    };
    "/auth/users/activation/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_users_activation_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/users/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["auth_users_me_retrieve"];
        put: operations["auth_users_me_update"];
        post?: never;
        delete: operations["auth_users_me_destroy"];
        options?: never;
        head?: never;
        patch: operations["auth_users_me_partial_update"];
        trace?: never;
    };
    "/auth/users/resend_activation/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_users_resend_activation_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/users/reset_email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_users_reset_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/users/reset_email_confirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_users_reset_email_confirm_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/users/reset_password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_users_reset_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/users/reset_password_confirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_users_reset_password_confirm_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/users/set_email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_users_set_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/users/set_password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_users_set_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Activation: {
            uid: string;
            token: string;
        };
        /** @description Serializer for the Genre model. Validates and serializes genre data. */
        Genre: {
            readonly id: number;
            name: string;
        };
        /** @description Serializer for the Movie model. Serializes basic movie information. */
        Movie: {
            readonly id: number;
            imdb_id: string;
            title: string;
            year: number;
            /** Format: uri */
            url_poster: string;
        };
        /** @description Serializer for detailed Movie information, including genres. */
        MovieDetail: {
            readonly id: number;
            genres: string[];
            imdb_id: string;
            title: string;
            year: number;
            runtime_minutes?: number | null;
            plot: string;
            country: string;
            /** Format: double */
            imdb_rating?: number;
            /** Format: uri */
            url_poster: string;
            is_full_record?: boolean;
        };
        /** @description Serializer for MovieNight model. Includes fields for the creator, movie, and start time. */
        MovieNight: {
            readonly id: number;
            /** Format: date-time */
            start_time: string;
            /**
             * Email address
             * Format: email
             */
            readonly creator: string;
            movie: number;
            readonly is_creator: string;
        };
        /** @description Detailed serializer for MovieNight, adding pending invitees and participants information. */
        MovieNightDetail: {
            readonly id: number;
            movie: number;
            /** Format: date-time */
            start_time: string;
            /**
             * Email address
             * Format: email
             */
            readonly creator: string;
            start_notification_sent?: boolean;
            start_notification_before?: string;
            /** @description Retrieve emails of invitees who haven't confirmed yet,
             *     but only return this data if the requesting user is the creator. */
            readonly pending_invitees: string[];
            /** @description Retrieve emails of invitees who have confirmed their attendance. */
            readonly participants: string[];
            readonly is_creator: string;
        };
        /** @description Serializer for MovieNightInvitation model. Handles the invitee and invitation data. */
        MovieNightInvitation: {
            readonly id: number;
            /** Format: email */
            invitee: string;
            movie_night: number;
            attendance_confirmed?: boolean;
            is_attending?: boolean;
        };
        /** @description Serializer for a search term input for searching movies.
         *     This serializer only handles a single field: 'term'. */
        MovieSearch: {
            term: string;
        };
        /** @description Serializer for Notification model. Serializes notification data including sender, recipient,
         *     and related content object. */
        Notification: {
            readonly id: number;
            /** Format: email */
            readonly recipient_email: string;
            /** Format: email */
            readonly sender_email: string | null;
            notification_type: components["schemas"]["NotificationTypeEnum"];
            is_read?: boolean;
            content_type: number;
            object_id: number;
            readonly content_object: string;
            message?: string;
            /** Format: date-time */
            readonly timestamp: string;
        };
        /**
         * @description * `INV` - Invitation
         *     * `REM` - Reminder
         *     * `RES` - Response
         *     * `UPD` - Update
         *     * `CAN` - Cancellation
         * @enum {string}
         */
        NotificationTypeEnum: "INV" | "REM" | "RES" | "UPD" | "CAN";
        PaginatedGenreList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Genre"][];
        };
        PaginatedMovieList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Movie"][];
        };
        PaginatedMovieNightInvitationList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["MovieNightInvitation"][];
        };
        PaginatedMovieNightList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["MovieNight"][];
        };
        PaginatedNotificationList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Notification"][];
        };
        PaginatedUserList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["User"][];
        };
        PasswordResetConfirmRetype: {
            uid: string;
            token: string;
            new_password: string;
            re_new_password: string;
        };
        /** @description Detailed serializer for MovieNight, adding pending invitees and participants information. */
        PatchedMovieNightDetail: {
            readonly id?: number;
            movie?: number;
            /** Format: date-time */
            start_time?: string;
            /**
             * Email address
             * Format: email
             */
            readonly creator?: string;
            start_notification_sent?: boolean;
            start_notification_before?: string;
            /** @description Retrieve emails of invitees who haven't confirmed yet,
             *     but only return this data if the requesting user is the creator. */
            readonly pending_invitees?: string[];
            /** @description Retrieve emails of invitees who have confirmed their attendance. */
            readonly participants?: string[];
            readonly is_creator?: string;
        };
        /** @description Serializer for MovieNightInvitation model. Handles the invitee and invitation data. */
        PatchedMovieNightInvitation: {
            readonly id?: number;
            /** Format: email */
            invitee?: string;
            movie_night?: number;
            attendance_confirmed?: boolean;
            is_attending?: boolean;
        };
        /** @description Serializer for Notification model. Serializes notification data including sender, recipient,
         *     and related content object. */
        PatchedNotification: {
            readonly id?: number;
            /** Format: email */
            readonly recipient_email?: string;
            /** Format: email */
            readonly sender_email?: string | null;
            notification_type?: components["schemas"]["NotificationTypeEnum"];
            is_read?: boolean;
            content_type?: number;
            object_id?: number;
            readonly content_object?: string;
            message?: string;
            /** Format: date-time */
            readonly timestamp?: string;
        };
        PatchedUser: {
            /**
             * Email address
             * Format: email
             */
            readonly email?: string;
        };
        SendEmailReset: {
            /** Format: email */
            email: string;
        };
        SetPassword: {
            new_password: string;
            current_password: string;
        };
        SetUsername: {
            current_password: string;
            /**
             * Email address
             * Format: email
             */
            new_email: string;
        };
        TokenObtainPair: {
            email: string;
            password: string;
            readonly access: string;
            readonly refresh: string;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        User: {
            /**
             * Email address
             * Format: email
             */
            readonly email: string;
        };
        UserCreatePasswordRetype: {
            /**
             * Email address
             * Format: email
             */
            email: string;
            password: string;
            re_password: string;
        };
        /** @description Serializer for the UserProfile model.
         *     Handles all fields of the UserProfile model. */
        UserProfile: {
            readonly id: number;
            bio: string;
            user: number;
        };
        UsernameResetConfirm: {
            /**
             * Email address
             * Format: email
             */
            new_email: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_schema_retrieve: {
        parameters: {
            query?: {
                format?: "json" | "yaml";
                lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.oai.openapi": {
                        [key: string]: unknown;
                    };
                    "application/yaml": {
                        [key: string]: unknown;
                    };
                    "application/vnd.oai.openapi+json": {
                        [key: string]: unknown;
                    };
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    api_v1_genres_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGenreList"];
                };
            };
        };
    };
    api_v1_genres_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Genre"];
                };
            };
        };
    };
    api_v1_movie_nights_list: {
        parameters: {
            query?: {
                creator?: number;
                invites__invitee?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Start Time From */
                start_from?: string;
                start_time?: string;
                /** @description Start Time To */
                start_to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMovieNightList"];
                };
            };
        };
    };
    api_v1_movie_nights_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieNightDetail"];
                };
            };
        };
    };
    api_v1_movie_nights_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MovieNightDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["MovieNightDetail"];
                "multipart/form-data": components["schemas"]["MovieNightDetail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieNightDetail"];
                };
            };
        };
    };
    api_v1_movie_nights_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_v1_movie_nights_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMovieNightDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedMovieNightDetail"];
                "multipart/form-data": components["schemas"]["PatchedMovieNightDetail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieNightDetail"];
                };
            };
        };
    };
    api_v1_movie_nights_invite_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MovieNightInvitation"];
                "application/x-www-form-urlencoded": components["schemas"]["MovieNightInvitation"];
                "multipart/form-data": components["schemas"]["MovieNightInvitation"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieNightInvitation"];
                };
            };
        };
    };
    api_v1_movie_nights_invited_list: {
        parameters: {
            query?: {
                creator?: number;
                invites__invitee?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Start Time From */
                start_from?: string;
                start_time?: string;
                /** @description Start Time To */
                start_to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMovieNightList"];
                };
            };
        };
    };
    api_v1_movienight_invitations_list: {
        parameters: {
            query?: {
                /** @description Filter invitations where invitees have responded to the invitation. */
                attendance_confirmed?: boolean;
                /** @description Filter invitations where invitees have accepted the invitation. */
                is_attending?: boolean;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMovieNightInvitationList"];
                };
            };
        };
    };
    api_v1_movienight_invitations_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieNightInvitation"];
                };
            };
        };
    };
    api_v1_movienight_invitations_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MovieNightInvitation"];
                "application/x-www-form-urlencoded": components["schemas"]["MovieNightInvitation"];
                "multipart/form-data": components["schemas"]["MovieNightInvitation"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieNightInvitation"];
                };
            };
        };
    };
    api_v1_movienight_invitations_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_v1_movienight_invitations_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMovieNightInvitation"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedMovieNightInvitation"];
                "multipart/form-data": components["schemas"]["PatchedMovieNightInvitation"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieNightInvitation"];
                };
            };
        };
    };
    api_v1_movies_list: {
        parameters: {
            query?: {
                country?: string;
                /** @description Genres */
                genres?: string[];
                /** @description Minimum IMDb Rating */
                imdb_rating_from?: number;
                is_full_record?: boolean;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Published Date From */
                published_from?: string;
                /** @description Published Date To */
                published_to?: string;
                /** @description Minimum Runtime (minutes) */
                runtime_minutes_from?: number;
                /** @description Maximum Runtime (minutes) */
                runtime_minutes_to?: number;
                /** @description Title Contains */
                title?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMovieList"];
                };
            };
        };
    };
    api_v1_movies_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieDetail"];
                };
            };
        };
    };
    api_v1_movies_search_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MovieSearch"];
                "application/x-www-form-urlencoded": components["schemas"]["MovieSearch"];
                "multipart/form-data": components["schemas"]["MovieSearch"];
            };
        };
        responses: {
            /** @description Redirected to either the 'wait' page or the results page depending on task completion. */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Invalid input data. The request failed validation. The response contains error details. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Internal Server Error. An error occurred while processing the request. This typically happens due to Celery issues or other server problems. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    api_v1_movies_search_results_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                search_term?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMovieList"];
                };
            };
        };
    };
    api_v1_movies_search_wait_retrieve: {
        parameters: {
            query?: {
                search_term?: string;
            };
            header?: never;
            path: {
                result_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    api_v1_my_movie_nights_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Start Time From */
                start_from?: string;
                start_time?: string;
                /** @description Start Time To */
                start_to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMovieNightList"];
                };
            };
        };
    };
    api_v1_my_movie_nights_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MovieNight"];
                "application/x-www-form-urlencoded": components["schemas"]["MovieNight"];
                "multipart/form-data": components["schemas"]["MovieNight"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieNight"];
                };
            };
        };
    };
    api_v1_notifications_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedNotificationList"];
                };
            };
        };
    };
    api_v1_notifications_mark_read_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Notification"];
                "application/x-www-form-urlencoded": components["schemas"]["Notification"];
                "multipart/form-data": components["schemas"]["Notification"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    api_v1_notifications_mark_read_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedNotification"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedNotification"];
                "multipart/form-data": components["schemas"]["PatchedNotification"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
            /** @description Forbidden. You are not allowed to update this notification. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Notification not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_v1_profiles_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
        };
    };
    auth_google_create: {
        parameters: {
            query: {
                /** @description The ID token received from Google */
                id_token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful authentication */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description ID token is required */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    auth_token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenObtainPair"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenObtainPair"];
                "multipart/form-data": components["schemas"]["TokenObtainPair"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenObtainPair"];
                };
            };
        };
    };
    auth_token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefresh"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
                "multipart/form-data": components["schemas"]["TokenRefresh"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    auth_users_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserList"];
                };
            };
        };
    };
    auth_users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatePasswordRetype"];
                "application/x-www-form-urlencoded": components["schemas"]["UserCreatePasswordRetype"];
                "multipart/form-data": components["schemas"]["UserCreatePasswordRetype"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserCreatePasswordRetype"];
                };
            };
        };
    };
    auth_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    auth_users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    auth_users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    auth_users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUser"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUser"];
                "multipart/form-data": components["schemas"]["PatchedUser"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    auth_users_activation_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Activation"];
                "application/x-www-form-urlencoded": components["schemas"]["Activation"];
                "multipart/form-data": components["schemas"]["Activation"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activation"];
                };
            };
        };
    };
    auth_users_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    auth_users_me_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    auth_users_me_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    auth_users_me_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUser"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUser"];
                "multipart/form-data": components["schemas"]["PatchedUser"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    auth_users_resend_activation_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendEmailReset"];
                "application/x-www-form-urlencoded": components["schemas"]["SendEmailReset"];
                "multipart/form-data": components["schemas"]["SendEmailReset"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendEmailReset"];
                };
            };
        };
    };
    auth_users_reset_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendEmailReset"];
                "application/x-www-form-urlencoded": components["schemas"]["SendEmailReset"];
                "multipart/form-data": components["schemas"]["SendEmailReset"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendEmailReset"];
                };
            };
        };
    };
    auth_users_reset_email_confirm_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UsernameResetConfirm"];
                "application/x-www-form-urlencoded": components["schemas"]["UsernameResetConfirm"];
                "multipart/form-data": components["schemas"]["UsernameResetConfirm"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsernameResetConfirm"];
                };
            };
        };
    };
    auth_users_reset_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendEmailReset"];
                "application/x-www-form-urlencoded": components["schemas"]["SendEmailReset"];
                "multipart/form-data": components["schemas"]["SendEmailReset"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendEmailReset"];
                };
            };
        };
    };
    auth_users_reset_password_confirm_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordResetConfirmRetype"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordResetConfirmRetype"];
                "multipart/form-data": components["schemas"]["PasswordResetConfirmRetype"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordResetConfirmRetype"];
                };
            };
        };
    };
    auth_users_set_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetUsername"];
                "application/x-www-form-urlencoded": components["schemas"]["SetUsername"];
                "multipart/form-data": components["schemas"]["SetUsername"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetUsername"];
                };
            };
        };
    };
    auth_users_set_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetPassword"];
                "application/x-www-form-urlencoded": components["schemas"]["SetPassword"];
                "multipart/form-data": components["schemas"]["SetPassword"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetPassword"];
                };
            };
        };
    };
}
